name: Build & Deploy

permissions:
  contents: write
  id-token: write
  packages: write

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  tag:
    name: Create git tag
    if: ${{ ! contains(toJSON(github.event.commits.*.message), '[skip ci]') }}
    runs-on: ubuntu-latest
    outputs:
      git-tag: ${{ steps.git-tag.outputs.bump }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install tag requirements
        run: python -m pip install semver
      - name: Get version bump
        id: git-tag
        run: echo "bump=$(python flows/docker.py bump)" >> $GITHUB_OUTPUT

  package:
    name: Build & Publish package
    needs:
      - tag
    if: needs.tag.outputs.git-tag != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Configure docker
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
      - name: Install build requirements
        run: python -m pip install build
      - name: Pull, build, tag, bump base image
        run: python flows/docker.py pull --build --promote
      - name: Build image
        run: python flows/docker.py build
      - name: Run tests against new image and save images
        run: python flows/docker.py test --push
      - name: Build distribution
        run: python -m build
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION: ${{ needs.tag.outputs.git-tag }}
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: Save git tag
        run: git push origin ${{ needs.tag.outputs.git-tag }}
      - name: Copy and surgery coverage
        run: |
          cp reports/.coverage .
          sqlite3 .coverage "update file set path='src/' || substr(path, 40);"
      - name: Post coverage comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}

  docs:
    name: Build & Publish documentation
    needs:
      - tag
    if: needs.tag.outputs.git-tag != ''
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: environment.yml
          create-args: python=3.10
          init-shell: bash
          cache-downloads: true
          cache-environment: true
          post-cleanup: all
      - name: Install build requirements
        run: python -m pip install build
      - name: Install plinder
        run: python -m pip install .
      - name: Build docs
        shell: bash -el {0}
        id: build
        run: |
          which python
          python -m pip install six
          python -m pip install '.[docs,loader]'
          sphinx-build docs build/docs
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION: ${{ needs.tag.outputs.git-tag }}
      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/docs
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
